
═══════════════════════════════════════════════════════════════
🧪 COMPLETE TESTING WORKFLOW - END-TO-END
═══════════════════════════════════════════════════════════════
AI-Powered Procurement System Testing Guide
Date: October 8, 2025, 4:10 PM IST

═══════════════════════════════════════════════════════════════
📋 PRE-REQUISITES (Setup Before Testing)
═══════════════════════════════════════════════════════════════

1. ✅ Complete the 2 Remaining Frontend Fixes
   ─────────────────────────────────────────────────────────
   Before testing, apply these fixes in your frontend.txt:

   FIX #1 - In handleUserSubmit function:
   Replace:
       appState.user.conversation.isComplete = data.iscomplete
   With:
       appState.user.conversation.isComplete = data.is_complete;
       appState.user.conversation.requirementId = data.requirement_id || null;

   FIX #2 - In handleUserConversationTurn function:
   Replace:
       appState.user.conversation.isComplete = data.iscomplete
       appState.user.conversation.requirementId = data.requirementid
       if (data.iscomplete && data.requirementid) {
   With:
       appState.user.conversation.isComplete = data.is_complete;
       appState.user.conversation.requirementId = data.requirement_id;
       if (data.is_complete && data.requirement_id) {


2. ✅ Start Your Backend Server
   ─────────────────────────────────────────────────────────
   Open Terminal:

   cd /path/to/your/backend/directory
   uvicorn main:app --reload

   Expected Output:
   INFO:     Uvicorn running on http://127.0.0.1:8000
   INFO:     Application startup complete.

   Test Backend:
   Open browser → http://127.0.0.1:8000/docs
   You should see the FastAPI Swagger documentation


3. ✅ Verify Database Connection
   ─────────────────────────────────────────────────────────
   Ensure your .env file has:

   SUPABASE_URL=your_supabase_project_url
   SUPABASE_KEY=your_supabase_anon_key
   TAVILY_API_KEY=your_tavily_api_key
   GOOGLE_API_KEY=your_google_gemini_api_key


4. ✅ Open Frontend
   ─────────────────────────────────────────────────────────
   Save your frontend.txt as: index.html

   Open index.html in Google Chrome or Firefox

   You should see the AutonomiQ interface with:
   - Left sidebar navigation
   - Three role buttons: User | Admin | Vendor


═══════════════════════════════════════════════════════════════
🧪 PHASE 1: USER REQUIREMENT GATHERING (Conversational AI)
═══════════════════════════════════════════════════════════════

SCENARIO: User wants to procure 5 high-end office chairs

Step 1: Switch to User Role
─────────────────────────────────────────────────────────
1. Click the "User" button (top right)
2. You should see a form with a textarea input

Step 2: Submit Initial Requirement
─────────────────────────────────────────────────────────
1. Type in the input box:
   "I need 5 new high-end office chairs for my team"

2. Click "Submit" button

3. ✅ EXPECTED RESULT:
   - Loading spinner appears briefly
   - A conversation interface opens
   - AI agent responds with questions like:
     * "What's your budget per chair?"
     * "Any specific features needed?"
     * "When do you need them?"

Step 3: Continue Conversation with AI
─────────────────────────────────────────────────────────
1. Answer the AI's first question:
   "Around 25,000 INR per chair"

2. Press Enter or click Send

3. ✅ EXPECTED RESULT:
   - Your message appears in the chat
   - AI responds with next question

4. Continue answering (example responses):
   Question: "Any specific features?"
   Answer: "Yes, they must be ergonomic with lumbar support"

   Question: "Delivery location?"
   Answer: "Mumbai office, Andheri West"

Step 4: Conversation Completion
─────────────────────────────────────────────────────────
1. After 3-5 exchanges, AI says:
   "Thank you! I have all the information needed..."

2. ✅ EXPECTED RESULT:
   - Toast notification: "✓ Requirement #X submitted successfully!"
   - Conversation is marked complete
   - Requirement saved to database

3. 🔍 VERIFY IN DATABASE:
   Check Supabase → Requirement table
   You should see a new row with:
   - id: (auto-generated)
   - status: "Draft" or "InReview"
   - raw_input: Your original text
   - conversation_state: JSON with all Q&A


═══════════════════════════════════════════════════════════════
🧪 PHASE 2: ADMIN PROCESSING & AI VALIDATION
═══════════════════════════════════════════════════════════════

SCENARIO: Admin reviews and enhances requirement with AI

Step 1: Switch to Admin Role
─────────────────────────────────────────────────────────
1. Click the "Admin" button (top right)

2. ✅ EXPECTED RESULT:
   - You see "New Requests" section
   - Your requirement appears in the list
   - Shows: "5 high-end office chairs..."

Step 2: Open the Requirement
─────────────────────────────────────────────────────────
1. Click on the requirement card

2. ✅ EXPECTED RESULT:
   - Detail view opens
   - You're in "Validate" step
   - You see:
     * Original requirement text
     * AI Suggestions section (empty initially)
     * Finalized Items section (empty initially)
     * Two new buttons at the bottom:
       🤖 Validate with AI
       🔍 Search Vendors

Step 3: Click "Validate with AI" Button
─────────────────────────────────────────────────────────
1. Click the "🤖 Validate with AI" button

2. ✅ EXPECTED RESULT:
   - Loading spinner appears
   - Toast: "✓ AI validation complete!"
   - A green box appears below with:

     AI SUGGESTIONS:
     • Adjustable lumbar support mechanism
     • Breathable mesh backing
     • 5-year warranty coverage
     • Adjustable armrests
     • Pneumatic height adjustment

3. 🔍 VERIFY:
   These suggestions come from your agent.py's 
   generate_suggestions() function

Step 4: Add Items to Finalized List
─────────────────────────────────────────────────────────
1. Click on any AI suggestion chip
   OR
2. Type custom item in the input box and click "Add"

3. ✅ EXPECTED RESULT:
   - Items move to "Finalized Items" section
   - Each item has an (×) remove button

Step 5: Click "Search Vendors" Button
─────────────────────────────────────────────────────────
1. Click the "🔍 Search Vendors" button

2. ✅ EXPECTED RESULT:
   - Loading spinner appears
   - Toast: "✓ Found X potential vendors"
   - A blue box appears below with:

     FOUND VENDORS (3):
     📍 Featherlite • www.featherliteonline.com
     📍 Herman Miller India • www.hermanmiller.co.in
     📍 Godrej Interio • www.godrejinterio.com

3. 🔍 VERIFY:
   These vendors come from Tavily web search
   in your main.py's search_vendors() endpoint

Step 6: Finalize & Send to User
─────────────────────────────────────────────────────────
1. Review your finalized items list
2. Click "Finalize & Send to User" button

3. ✅ EXPECTED RESULT:
   - Status updates to "UserConfirmed" or "PendingUserApproval"
   - Toast confirmation message
   - Requirement moves to appropriate list


═══════════════════════════════════════════════════════════════
🧪 PHASE 3: SEND RFQ TO VENDORS
═══════════════════════════════════════════════════════════════

SCENARIO: Admin sends RFQ to selected vendors

Step 1: Navigate to "RFQ" Step
─────────────────────────────────────────────────────────
1. In the same requirement detail view
2. Click "RFQ" tab/step (if available in your UI)

Step 2: Send RFQ to Vendors
─────────────────────────────────────────────────────────
1. API Endpoint being called:
   POST /requirements/{id}/send-rfq

   Body: {
     "vendor_ids": [1, 2, 3],
     "deadline": "2025-10-20"
   }

2. ✅ EXPECTED RESULT:
   - RFQ records created in database
   - Vendors can now see invitation in their portal


═══════════════════════════════════════════════════════════════
🧪 PHASE 4: VENDOR QUOTE SUBMISSION
═══════════════════════════════════════════════════════════════

SCENARIO: Vendor submits price quote

Step 1: Switch to Vendor Role
─────────────────────────────────────────────────────────
1. Click "Vendor" button (top right)

2. ✅ EXPECTED RESULT:
   - "Welcome, Sonic Rentals" message
   - "Impersonate" dropdown (select vendor ID)
   - "RFQ Invitations" section

Step 2: View RFQ Invitation
─────────────────────────────────────────────────────────
1. You should see RFQ card(s) for pending invitations
2. Click on an RFQ invitation

3. ✅ EXPECTED RESULT:
   - Opens RFQ detail view
   - Shows requirement details
   - Shows finalized items list
   - Quote submission form

Step 3: Submit Quote
─────────────────────────────────────────────────────────
1. Fill in quote details:
   - Total Amount: 120000
   - Delivery Timeline: 7 days
   - Payment Terms: 30 days NET
   - Additional Notes: "Includes installation"

2. Click "Submit Quote" button

3. ✅ EXPECTED RESULT:
   - Quote saved to database
   - Toast: "Quote submitted successfully!"
   - RFQ status updates

4. 🔍 VERIFY IN DATABASE:
   Check Supabase → Quotes table
   New row with:
   - vendor_id: 1 (or your vendor)
   - amount: 120000
   - status: "Submitted"


═══════════════════════════════════════════════════════════════
🧪 PHASE 5: ADMIN DECISION MAKING (AI Scoring)
═══════════════════════════════════════════════════════════════

SCENARIO: Admin reviews quotes and uses AI to score vendors

Step 1: Switch Back to Admin Role
─────────────────────────────────────────────────────────
1. Click "Admin" button
2. Open the same requirement
3. Navigate to "Review Quotes" section

Step 2: View Submitted Quotes
─────────────────────────────────────────────────────────
1. ✅ EXPECTED RESULT:
   - List of all vendor quotes
   - Each quote shows:
     * Vendor name
     * Amount quoted
     * Delivery timeline
     * Payment terms

Step 3: Run AI Scoring (if implemented)
─────────────────────────────────────────────────────────
1. Click "Run AI Scoring" button
   (API: POST /quotes/run-scoring/{requirement_id})

2. ✅ EXPECTED RESULT:
   - Each quote gets an AI score (0-100)
   - Scores appear on quote cards
   - Sorted by best score

3. AI scoring considers:
   - Price competitiveness
   - Delivery speed
   - Vendor reputation
   - Payment terms flexibility

Step 4: Select Winner
─────────────────────────────────────────────────────────
1. Review scores and details
2. Click "Select as Winner" on best vendor
   (API: POST /requirements/{id}/select-winner)

3. ✅ EXPECTED RESULT:
   - Requirement status → "WinnerSelected"
   - Winner vendor ID saved
   - Toast: "Vendor selected successfully!"


═══════════════════════════════════════════════════════════════
📊 COMPLETE WORKFLOW SUMMARY
═══════════════════════════════════════════════════════════════

Phase 1: USER submits requirement → AI conversation → Saved
Phase 2: ADMIN validates → AI suggestions → Vendor search
Phase 3: ADMIN sends RFQ to vendors
Phase 4: VENDOR submits quote
Phase 5: ADMIN reviews → AI scoring → Selects winner

WORKFLOW DURATION: ~10-15 minutes for full cycle


═══════════════════════════════════════════════════════════════
🔍 TESTING CHECKLIST
═══════════════════════════════════════════════════════════════

□ Backend server is running (uvicorn)
□ Frontend opens without errors
□ Can switch between User/Admin/Vendor roles
□ User conversation with AI works
□ Conversation completion shows requirement ID
□ Admin can see new requirements
□ "Validate with AI" button works and shows suggestions
□ "Search Vendors" button works and shows results
□ Can add/remove finalized items
□ Can send RFQ (if endpoint exists)
□ Vendor can view invitations
□ Vendor can submit quotes
□ Admin can review and select winner


═══════════════════════════════════════════════════════════════
🐛 TROUBLESHOOTING
═══════════════════════════════════════════════════════════════

Issue: "Failed to fetch" error
Fix: Check backend is running on http://127.0.0.1:8000

Issue: AI agent not responding
Fix: Verify GOOGLE_API_KEY in .env file

Issue: Vendor search returns empty
Fix: Verify TAVILY_API_KEY in .env file

Issue: Database errors
Fix: Check SUPABASE_URL and SUPABASE_KEY in .env

Issue: CORS errors in console
Fix: Backend already has CORS enabled, restart backend server


═══════════════════════════════════════════════════════════════
📝 TEST DATA EXAMPLES
═══════════════════════════════════════════════════════════════

Example Requirement 1:
"I need 10 laptops for our new employees. Budget is 50000 per laptop."

Example Requirement 2:
"Looking for audio equipment for a conference. Need microphones, speakers, 
and a mixer. Event is in 2 weeks."

Example Requirement 3:
"Need office furniture for 20 workstations - desks, chairs, and storage 
cabinets. Modern design preferred."


═══════════════════════════════════════════════════════════════
✅ SUCCESS CRITERIA
═══════════════════════════════════════════════════════════════

Your integration is working correctly if:

✓ User can have natural conversation with AI agent
✓ Conversation state persists across messages
✓ Requirement is saved with correct status
✓ Admin sees new requirements immediately
✓ AI validation returns relevant suggestions
✓ Vendor search returns real company names/websites
✓ All role switches work without errors
✓ Database updates reflect in UI without refresh
✓ Toast notifications appear for all actions
✓ No console errors (check browser DevTools)


═══════════════════════════════════════════════════════════════
END OF TESTING WORKFLOW
═══════════════════════════════════════════════════════════════

Good luck with your testing! 🚀

Contact: This conversation in Perplexity AI
Date Created: October 8, 2025
