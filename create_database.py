import os
import psycopg2
import urllib.parse as urlparse
from psycopg2 import OperationalError
from dotenv import load_dotenv

# Load environment variables from the .env file
load_dotenv()

# The entire SQL script to set up the database schema.
SQL_SCRIPT = """
-- Drop tables if they exist to start with a clean slate.
DROP TABLE IF EXISTS "User" CASCADE;
DROP TABLE IF EXISTS "Role" CASCADE;
DROP TABLE IF EXISTS "Requirement" CASCADE;

-- Create the Role table
CREATE TABLE "Role" (
    role_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_name VARCHAR(50) UNIQUE NOT NULL
);

-- Insert the predefined roles into the Role table
INSERT INTO "Role" (role_name) VALUES ('user'), ('admin'), ('vendor');

-- Create the User table
CREATE TABLE "User" (
    user_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(100) UNIQUE NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    mobile_number VARCHAR(15) UNIQUE NOT NULL,
    email_id VARCHAR(255) UNIQUE NOT NULL,
    role_id BIGINT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_role
        FOREIGN KEY(role_id)
        REFERENCES "Role"(role_id)
        ON DELETE RESTRICT
);

-- Create an index for faster lookups on email
CREATE INDEX idx_user_email ON "User"(email_id);

-- Create the Requirement table
CREATE TABLE "Requirement" (
    req_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    req_description TEXT NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Add a check constraint to ensure end_date is not before start_date
ALTER TABLE "Requirement" ADD CONSTRAINT chk_date_order CHECK (end_date >= start_date);
"""

def setup_database():
    """
    Connects to the Supabase database and executes the SQL script to create tables.
    """
    conn = None
    DATABASE_URL = os.getenv("DATABASE_URL")

    if not DATABASE_URL:
        print("❌ Error: DATABASE_URL environment variable is not set.")
        print("   Please ensure your .env file is correctly set up.")
        return

    try:
        # --- THE DEFINITIVE FIX IS HERE ---
        # We now use Python's built-in `urllib.parse` to handle the database URL.
        # This removes the dependency on `dj-database-url` and its quirks.
        result = urlparse.urlparse(DATABASE_URL)
        conn_params = {
            'dbname': result.path[1:],  # Remove the leading '/' from the path
            'user': result.username,
            'password': result.password,
            'host': result.hostname,
            'port': result.port
        }
        # --- END OF FIX ---

        print("Connecting to the Supabase database...")
        conn = psycopg2.connect(**conn_params)
        print("✅ Connection successful.")

        with conn.cursor() as cur:
            print("Running database setup script...")
            cur.execute(SQL_SCRIPT)
            print("✅ Tables created and populated successfully!")

        conn.commit()

    except OperationalError as e:
        print(f"❌ Connection Error: Could not connect to the database. {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        if conn:
            conn.rollback()
    finally:
        if conn is not None:
            conn.close()
            print("Database connection closed.")

if __name__ == '__main__':
    # Use the name of your script here if you renamed it
    print("--- Starting Database Setup (e.g., from create_database.py) ---")
    setup_database()
    print("--- Database Setup Finished ---")

